{"version":3,"sources":["components/DisplayData.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayData","props","weather","temperature","description","location","region","country","wind_speed","pressure","precip","humidity","img","className","src","alt","Navbar","onSubmit","e","changeWeather","placeholder","onChange","changeRegion","target","value","App","state","coords","latitude","longitude","data","inputData","change","setState","console","log","event","preventDefault","Axios","get","then","res","weatherData","current","weather_descriptions","name","weather_icons","navigator","geolocation","getCurrentPosition","position","newCoords","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86ac68e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction DisplayData(props){\r\n  // console.log(props.weather);\r\n  const {temperature, description, location, region, country, wind_speed, pressure, precip, humidity, img} = props.weather;\r\n  return (\r\n    <div className='user-weather'>\r\n      <div className=\"row\">\r\n                <div className=\"col-md-3 weather-temp\">\r\n                    <h1>{temperature}<sup>o</sup>C , {description}</h1>\r\n                    <h4>{location}<b>{region} , {country}</b></h4>\r\n                    \r\n                </div>\r\n\r\n                <div className=\"col-md-9\">\r\n                    <img className=\"mainImg\" src={img} alt=\"weather-img\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 weather-info\">\r\n                    <p><b>Wind Speed</b>(km/hr)</p>\r\n                    <h2>{wind_speed}</h2>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 weather-info\">\r\n                    <p><b>Preassure</b>(millibar)</p>\r\n                    <h2>{pressure}</h2>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 weather-info\">\r\n                    <p><b>Precipitation</b>(mm)</p>\r\n                    <h2>{precip}</h2>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 weather-info\">\r\n                    <p><b>Humidity</b>(%)</p>\r\n                    <h2>{humidity}</h2>\r\n                </div>\r\n\r\n            </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default DisplayData;","import React from 'react';\r\n\r\nfunction Navbar(props){\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-md-6'>\r\n        <h1 className='title'>Realtime Weather</h1>\r\n      </div>\r\n      <div className='col-md-6'>\r\n        <form className='region' onSubmit={(e) => props.changeWeather(e)}>\r\n          <input className='regioninput' placeholder='Enter Your Location' onChange={(e) => {props.changeRegion(e.target.value)}}></input>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport DisplayData from './components/DisplayData';\nimport Navbar from './components/Navbar';\n\nclass App extends React.Component {\n  \n  state = {\n    coords : {\n      latitude : 37,\n      longitude : 127\n    },\n    data : {},\n    inputData : \"\"\n  }\n\n  componentDidMount(){\n    console.log('render mounted');\n    if(navigator.geolocation){\n      // console.log('supported');\n      navigator.geolocation.getCurrentPosition((position) => {\n        // console.log(position.coords.latitude, position.coords.longitude);\n        let newCoords = {\n          latitude : position.coords.latitude,\n          longitude : position.coords.longitude\n        }\n        this.setState({\n          coords : newCoords\n        });\n        // console.log(this.state.coords);\n\n        Axios.get(`http://api.weatherstack.com/current?access_key=b99b7daa42feab4eccbe24f7292efebf&query=${this.state.coords.latitude},${this.state.coords.longitude}`).then((res) => {\n          // console.log(res);\n          let weatherData = {\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0],\n            location: res.data.location.name,\n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons\n          }\n          this.setState({data : weatherData});\n        })\n      });\n    } else {\n      console.log('not supported');\n    }\n  }\n\n  change = (value) => {\n    // console.log(value);\n    this.setState({inputData : value});\n    console.log(this.state.inputData);\n  }\n\n  changeWeather = (event) => {\n    // 화살표 함수 : this를 바인딩 해야하기 때문에\n    event.preventDefault();\n    Axios.get(`http://api.weatherstack.com/current?access_key=b99b7daa42feab4eccbe24f7292efebf&query=${this.state.inputData}`).then((res) => {\n      // console.log(res);\n      let weatherData = {\n        temperature: res.data.current.temperature,\n        description: res.data.current.weather_descriptions[0],\n        location: res.data.location.name,\n        region: res.data.location.region,\n        country: res.data.location.country,\n        wind_speed: res.data.current.wind_speed,\n        pressure: res.data.current.pressure,\n        precip: res.data.current.precip,\n        humidity: res.data.current.humidity,\n        img: res.data.current.weather_icons\n      }\n      this.setState({data : weatherData});\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className='container'>\n          <Navbar changeRegion = {this.change} changeWeather = {this.changeWeather} />\n          <DisplayData weather = {this.state.data} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}